@page "/login"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Login - Asset Management System</PageTitle>

<div class="container-fluid vh-100">
    <div class="row justify-content-center align-items-center h-100">
        <div class="col-md-4">
            <div class="card shadow">
                <div class="card-body p-5">
                    <div class="text-center mb-4">
                        <i class="bi bi-shield-lock display-4 text-primary"></i>
                        <h2 class="mt-3">Asset Management</h2>
                        <p class="text-muted">Please sign in to continue</p>
                    </div>

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                            <ValidationMessage For="() => loginModel.Email" />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                            <ValidationMessage For="() => loginModel.Password" />
                        </div>
                        
                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" />
                            <label class="form-check-label">Remember me</label>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Sign In
                            </button>
                        </div>
                    </EditForm>
                    
                    <hr class="my-4">
                    
                    <div class="text-center">
                        <button type="button" class="btn btn-outline-secondary" @onclick="CreateDefaultAdmin">
                            Create Default Admin Account
                        </button>
                    </div>
                    
                    <div class="text-center mt-3">
                        <small class="text-muted">
                            Default admin: admin@assetmanagement.com / Admin123!
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    
    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        
        [Required]
        public string Password { get; set; } = string.Empty;
        
        public bool RememberMe { get; set; }
    }
    
    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await SignInManager.PasswordSignInAsync(
                loginModel.Email, 
                loginModel.Password, 
                loginModel.RememberMe, 
                lockoutOnFailure: false);
            
            if (result.Succeeded)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task CreateDefaultAdmin()
    {
        try
        {
            var existingUser = await UserManager.FindByEmailAsync("admin@assetmanagement.com");
            if (existingUser == null)
            {
                var user = new IdentityUser
                {
                    UserName = "admin@assetmanagement.com",
                    Email = "admin@assetmanagement.com",
                    EmailConfirmed = true
                };
                
                var result = await UserManager.CreateAsync(user, "Admin123!");
                if (result.Succeeded)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Default admin account created successfully!");
                }
                else
                {
                    var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                    await JSRuntime.InvokeVoidAsync("alert", $"Failed to create admin account: {errors}");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Admin account already exists!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error creating admin account.");
        }
    }
}